library(RSAGA)
?RSAGA
?rsaga.sgrd.to.esri
?library
library()
library(linmod3)
?linmod3
library(codetools)
?codetools
?lib.loc
?library
install.packages("gsl")
install.packages("roxygen2")
install.packages("RSAGA")
library(RSAGA)
install.packages("gstat")
library(RSAGA)
?RSAGA
?rsaga.sgrd.to.esri
library(RSAGA)
rsaga.env()
## Load RSAGA
library(RSAGA)
## Set SAGA Environments - win32 (PROGRA~1)
env208 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.0.8_bin_msw_win32")
env210 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.0_win32")
env211 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.1_win32")
env212 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.2_win32")
rsaga.get.usage("grid_tools", "Close Gaps", env = env208)
rsaga.get.usage("grid_tools", "Close Gaps", env = env210)
rsaga.get.usage("grid_tools", "Close Gaps", env = env211)
rsaga.get.usage("grid_tools", "Close Gaps", env = env212)
rsaga.get.usage("ta_lighting", "Analytical Hillshading", env = env208)
rsaga.get.usage("ta_lighting", "Insolation", env = env208)
library(nlme)
?CorSpher()
?CorSpher
library(RSAGA)
rsaga.get.usage("ta_lighting", "Potential Incoming Solar Radiation", env = rsaga.get.env())
rsaga.get.usage("ta_lighting", "Potential Incoming Solar Radiation", env = rsaga.env())
?rsaga.pisr
############################################
## Landsat REFLECTANCE Extraction -        #
##            Julian 283                   #
## Extraction by Band - Julian Date 283    #
## West Perth County - Ontario             #
## Author: Donovan Bangs                   #
##  University of Waterloo                 #
## Last Updated: 14 February 2014          #
############################################
## Objective: Extract Landsat data by      #
##    polygon shapefile field boundaries   #
############################################
library(sp)
library(raster)
library(rgdal)
library(maptools)
## Load Bands from ENVI file as *RasterLayer
ls01 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 1)
ls02 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 2)
ls03 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 3)
ls04 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 4)
ls05 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 5)
ls06 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 6)
ls07 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 7)
ls08 <- raster("G:/Data Library/Satellite/Landsat/Data/P19_R30/Reflectance/LC80190302013283LGN00_Refl.dat", band = 8)
RS <- stack(c(ls01, ls02, ls03, ls04, ls05,
ls06, ls07, ls08))
## Load Shapefile Field Boundaries
fb <- readShapePoly("G:\\Transfer\\WP_CAG\\WP_secA")
## Extract through RasterStack Function
exIt <- function(i){
m <- extract(RS[[i]], fb[i], method = 'simple', fun = "median")    ## Extracts Median value for all pixels in each polygon
}
## Extract by Polygon
extr <- sapply(1:nlayers(RS), exIt)   ## Extracts by each polygon, stores as matrix poly x rasters
ext.d <- as.data.frame(extr)         ## Converts to data.frame
ext.d$Crop <- fb$CROP                   ## Includes Crop Type
ext.csv <- write.csv(ext.d, "G:\\Transfer\\WP_CAG\\WP_Tables\\Reflectance\\d2013283.csv")
#########################################################################
## Boxplots
## Can be reproduced for each Date
#########################################################################
## For only Corn, Soybeans, Winter Wheat
ext.sel <- ext.d[ext.d$Crop=="Corn" | ext.d$Crop=="Soybeans" | ext.d$Crop=="Winter Wheat",] #Select only Corn, Soybeans, Winter Wheat
ext.sel$Crop <- factor(ext.sel$Crop)  #Relevel Crop to three factors
## Test Boxplot - V1
boxplot(V1 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 1 (Aerosol Blue) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V2
boxplot(V2 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 2 (Blue) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V3
boxplot(V3 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 3 (Green) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V4
boxplot(V4 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 4 (Red) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V5
boxplot(V5 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 5 (NIR) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V6
boxplot(V6 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 6 (SWIR1) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V7
boxplot(V7 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 7 (SWIR2) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
## V8
boxplot(V8 ~ Crop, data<-ext.sel,
xlab = "Crop", ylab = "Digital Number",
main = "Band 9 (Cirrus) / Oct 10",
col = c("orange1","olivedrab4","khaki1"))
library(RSAGA)
?rsaga.get.usage
rsaga.get.usage(rsaga.close.gaps)
## Load RSAGA
library(RSAGA)
## Set SAGA Environments - win32 (PROGRA~1)
env208 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.0.8_bin_msw_win32")
env210 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.0_win32")
env211 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.1_win32")
env212 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.2_win32")
rsaga.get.usage(rsaga.close.gaps, env = env208)
rsaga.get.usage(rsaga.insolation, env = env208)
rsaga.get.usage(rsaga.module.exists, env = env208)
?rsaga.module.exists
?rsaga.contour
rsaga.get.usage(rsaga.contour, env = env208)
rsaga.get.usage(rsaga.close.gaps, env = env208)
rsaga.get.usage(rsaga.pisr, env = env212)
rsaga.get.usage(rsaga.pisr, env = env208)
env204 <- rsaga.env(path = "C:/SAGA-GIS/SAGA-GIS_2.0.4")
rsaga.get.usage(rsaga.pisr, env = env204)
rsaga.get.usage(rsaga.pisr, env = env204)
rsaga.get.usage(rsaga.close.gaps, env = env204)
rsaga.get.usage(rsaga.solar.radiation, env = env204)
env212 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.2_win32")
library(RSAGA)
env212 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.2_win32")
env212$modules
?rsaga.get.modules
Sys.info()
## Load RSAGA
library(RSAGA)
env212 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.2_win32")
env212
?rsaga.get.modules
env210 <- rsaga.env(path = "C:/SAGA-GIS/saga_2.1.0_win32")
rsaga.html.help("io_grid", 1, env = env210)
mod212 <- rsaga.get.modules(env = env212)
libs212 <- rsaga.get.libraries(path = env212$modules)
mod212
rawres = rsaga.geoprocessor(lib, module=NULL, env=env212,
intern=TRUE, show.output.on.console=FALSE, flags=NULL, invisible=TRUE,
reduce.intern=FALSE, check.module.exists=FALSE, warn = -1)
rawres = rsaga.geoprocessor("ta_morphometry", module=NULL, env=env212,
intern=TRUE, show.output.on.console=FALSE, flags=NULL, invisible=TRUE,
reduce.intern=FALSE, check.module.exists=FALSE, warn = -1)
rawres
rawres210 = rsaga.geoprocessor("ta_morphometry", module=NULL, env=env210,
intern=TRUE, show.output.on.console=FALSE, flags=NULL, invisible=TRUE,
reduce.intern=FALSE, check.module.exists=FALSE, warn = -1)
rawres210
wh = which( gsub(" ","",tolower(rawres)) %in% c("availablemodules:","executablemodules:","modules:") )
wh
wh = which( gsub(" ","",tolower(rawres)) %in% c("availablemodules:","executablemodules:","tools:") )
wh
wh = which( gsub(" ","",tolower(rawres)) %in% c("availablemodules:","executablemodules:","tools:", "modules:") )
wh
rsaga.get.lib.modules = function(lib, env=rsaga.env(), interactive=FALSE)
{
res = NULL
# changed by Rainer Hurling, 2013-07-23:
###if ( lib == "opencv" & (is.na(env$version) | (env$version == "2.0.4" | env$version == "2.0.5" | env$version == "2.0.6")) ) {
if ( lib == "opencv" & env$version %in% c(NA,"2.0.4","2.0.5","2.0.6") ) {
warning("skipping library 'opencv' because it produces an error\n",
"  when requesting its module listing in SAGA version 2.0.4 - 2.0.6)")
# return an empty data.frame of the same format as in the successful situation:
return( data.frame( code = numeric(), name = character(), interactive = logical() ) )
}
rawres = rsaga.geoprocessor(lib, module=NULL, env=env,
intern=TRUE, show.output.on.console=FALSE, flags=NULL, invisible=TRUE,
reduce.intern=FALSE, check.module.exists=FALSE, warn = -1)
wh = which( gsub(" ","",tolower(rawres)) %in% c("availablemodules:","executablemodules:","modules:", "tools:") )
if (length(wh) > 0) {
rawres = rawres[ (wh[length(wh)]+1) : length(rawres) ]
rawres = rawres[ rawres != "" ]
rawres = rawres[ rawres != "type -h or --help for further information" ]
# inserted tolower() for SAGA 2.1.0 RC1:
rawres = rawres[ tolower(rawres) != "error: module" ]
}
if (length(wh) > 0) {
rawres = strsplit(rawres,"\t- ")
mcodes = c()
mnames = c()
minteracs = c()
for (descr in rawres) {
mygrep = c( grep("[",descr[1],fixed=TRUE), grep("]",descr[1],fixed=TRUE),
grep("[interactive]",descr[2],fixed=TRUE) )
minterac = (length(mygrep) > 0)
# skip interactive modules if only interactive ones are allowed:
if (!minterac | interactive) {
mcode = gsub("[","",gsub("]","",gsub(" ","",descr[1]),fixed=TRUE),fixed=TRUE)
mname = gsub("[interactive] ","",descr[2],fixed=TRUE)
mcodes = c(mcodes, as.numeric(mcode))
mnames = c(mnames, mname)
minteracs = c(minteracs, minterac)
}
}
#if (length(mcodes) > 0)
res = data.frame(code=mcodes, name=mnames, interactive=minteracs)
}
return(res)
}
mod212 <- rsaga.get.modules(env = env212)
mod212
rsaga.get.lib.modules("ta_morphometry", env = env212)
test <- rsaga.get.lib.modules("ta_morphometry", env = env212)
test
test210 <- rsaga.get.lib.modules("ta_morphometry", env = env210)
test210
rsaga.get.lib.modules = function(lib, env=rsaga.env(), interactive=FALSE)
{
res = NULL
# changed by Rainer Hurling, 2013-07-23:
###if ( lib == "opencv" & (is.na(env$version) | (env$version == "2.0.4" | env$version == "2.0.5" | env$version == "2.0.6")) ) {
if ( lib == "opencv" & env$version %in% c(NA,"2.0.4","2.0.5","2.0.6") ) {
warning("skipping library 'opencv' because it produces an error\n",
"  when requesting its module listing in SAGA version 2.0.4 - 2.0.6)")
# return an empty data.frame of the same format as in the successful situation:
return( data.frame( code = numeric(), name = character(), interactive = logical() ) )
}
rawres = rsaga.geoprocessor(lib, module=NULL, env=env,
intern=TRUE, show.output.on.console=FALSE, flags=NULL, invisible=TRUE,
reduce.intern=FALSE, check.module.exists=FALSE, warn = -1)
wh = which( gsub(" ","",tolower(rawres)) %in% c("availablemodules:","executablemodules:","modules:") )
if (length(wh) > 0) {
rawres = rawres[ (wh[length(wh)]+1) : length(rawres) ]
rawres = rawres[ rawres != "" ]
rawres = rawres[ rawres != "type -h or --help for further information" ]
# inserted tolower() for SAGA 2.1.0 RC1:
rawres = rawres[ tolower(rawres) != "error: module" ]
}
if (length(wh) > 0) {
rawres = strsplit(rawres,"\t- ")
mcodes = c()
mnames = c()
minteracs = c()
for (descr in rawres) {
mygrep = c( grep("[",descr[1],fixed=TRUE), grep("]",descr[1],fixed=TRUE),
grep("[interactive]",descr[2],fixed=TRUE) )
minterac = (length(mygrep) > 0)
# skip interactive modules if only interactive ones are allowed:
if (!minterac | interactive) {
mcode = gsub("[","",gsub("]","",gsub(" ","",descr[1]),fixed=TRUE),fixed=TRUE)
mname = gsub("[interactive] ","",descr[2],fixed=TRUE)
mcodes = c(mcodes, as.numeric(mcode))
mnames = c(mnames, mname)
minteracs = c(minteracs, minterac)
}
}
#if (length(mcodes) > 0)
res = data.frame(code=mcodes, name=mnames, interactive=minteracs)
}
return(res)
}
test210 <- rsaga.get.lib.modules("ta_morphometry", env = env210)
test210
test212 <- rsaga.get.lib.modules("ta_morphometry", env = env212)
test212
rsaga.get.lib.modules = function(lib, env=rsaga.env(), interactive=FALSE)
{
res = NULL
# changed by Rainer Hurling, 2013-07-23:
###if ( lib == "opencv" & (is.na(env$version) | (env$version == "2.0.4" | env$version == "2.0.5" | env$version == "2.0.6")) ) {
if ( lib == "opencv" & env$version %in% c(NA,"2.0.4","2.0.5","2.0.6") ) {
warning("skipping library 'opencv' because it produces an error\n",
"  when requesting its module listing in SAGA version 2.0.4 - 2.0.6)")
# return an empty data.frame of the same format as in the successful situation:
return( data.frame( code = numeric(), name = character(), interactive = logical() ) )
}
rawres = rsaga.geoprocessor(lib, module=NULL, env=env,
intern=TRUE, show.output.on.console=FALSE, flags=NULL, invisible=TRUE,
reduce.intern=FALSE, check.module.exists=FALSE, warn = -1)
wh = which( gsub(" ","",tolower(rawres)) %in% c("availablemodules:","executablemodules:","modules:", "tools:") )
if (length(wh) > 0) {
rawres = rawres[ (wh[length(wh)]+1) : length(rawres) ]
rawres = rawres[ rawres != "" ]
rawres = rawres[ rawres != "type -h or --help for further information" ]
# inserted tolower() for SAGA 2.1.0 RC1:
rawres = rawres[ tolower(rawres) != "error: module" ]
}
if (length(wh) > 0) {
rawres = strsplit(rawres,"\t- ")
mcodes = c()
mnames = c()
minteracs = c()
for (descr in rawres) {
mygrep = c( grep("[",descr[1],fixed=TRUE), grep("]",descr[1],fixed=TRUE),
grep("[interactive]",descr[2],fixed=TRUE) )
minterac = (length(mygrep) > 0)
# skip interactive modules if only interactive ones are allowed:
if (!minterac | interactive) {
mcode = gsub("[","",gsub("]","",gsub(" ","",descr[1]),fixed=TRUE),fixed=TRUE)
mname = gsub("[interactive] ","",descr[2],fixed=TRUE)
mcodes = c(mcodes, as.numeric(mcode))
mnames = c(mnames, mname)
minteracs = c(minteracs, minterac)
}
}
#if (length(mcodes) > 0)
res = data.frame(code=mcodes, name=mnames, interactive=minteracs)
}
return(res)
}
test212 <- rsaga.get.lib.modules("ta_morphometry", env = env212)
test212
